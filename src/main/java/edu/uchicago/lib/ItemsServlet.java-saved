/*
 * items.java
 *
 * Created on July 9, 2007, 1:16 PM
 */

package edu.uchicago.lib;

import java.io.*;
import java.net.*;

import java.text.*;
import java.util.*;

import javax.servlet.*;
import javax.servlet.http.*;

import java.sql.*;
import javax.naming.*;
import javax.rmi.PortableRemoteObject;
import javax.sql.DataSource;
import javax.xml.transform.*;
import javax.xml.transform.stream.*;
import org.xml.sax.*;

import com.dynix.util.HtmlEncoder;

/**
 *
 * @author tod
 * @version
 */
public class ItemsServlet extends HttpServlet {
    
    private static String dsn = "horizon-opac";
    private static Context ctx;
    private static String prefix;
    private static String realPath;
    private static DataSource ds;
    private static Connection conn;
    
    // Parameter names
    private static String bibIdParmName = "bibId";
    private static String copyIdParmName = "copyId";
    private static String itemIdParmName = "itemId";
        
    public void init(ServletConfig config) throws ServletException {
        // Stupid check to see whether we're actually in HIP
        prefix = System.getProperty("dynix.context.ds.lookup.prefix");
        // System.err.println("PREFIX: " + prefix);
        if (prefix != null) {
            //Running in HIP and JBoss
            // System.out.println("Looks like we are running in HIP.");
            try {
                ctx = getInitialContext();
                prefix = System.getProperty("dynix.context.ds.lookup.prefix", "java:/");
                ds = (DataSource)PortableRemoteObject.narrow(ctx.lookup(prefix + dsn), javax.sql.DataSource.class);
                realPath = config.getServletContext().getRealPath(".");
            } catch (Exception e ) {
                e.printStackTrace();
            }
        } else {
            //Maybe running in Tomcat and NetBeans?
            System.out.println("Looks like we are NOT running in HIP.");
            try {
                ctx = new InitialContext();
                if ( ctx == null ) {
                    throw new Exception("Uh oh -- no context!");
                }
                
                String name = "java:/comp/env/horizon-opac";
                System.out.println("Looking up " + name);
                System.out.flush();
                // ds = (DataSource) ctx.lookup( "java:/comp/env/catalog" );
                ds = (DataSource) ctx.lookup( name );
                System.out.println("Looking up " + name);
                System.out.flush();
                
                if ( ds == null ) {
                    throw new Exception("Data source not found!");
                }
            } catch (Exception e ) {
                e.printStackTrace();
            }
            
        }
    }
    
    /** Processes requests for both HTTP <code>GET</code> and <code>POST</code> methods.
     * @param request servlet request
     * @param response servlet response
     */
    protected void processRequest(HttpServletRequest request, HttpServletResponse response)
    throws ServletException, IOException {
        
        String ret;
        boolean getDefault = true;
        boolean getCopy = false;
        boolean getItem = false;
        boolean debug = false;
        
        // TODO: handle runtime error where no legal key param is present.
        String keyName = "";
        int keyValue;
        String debugStr = request.getParameter("debug");
        if (debugStr != null) {
            debug = Boolean.valueOf(debugStr).booleanValue();
        }
        String getItemStr = request.getParameter("getItem");
        if (getItemStr != null) {
            getItem = Boolean.valueOf(getItemStr).booleanValue();
        }
        String getCopyStr = request.getParameter("getCopy");
        if (getCopyStr != null) {
            getCopy = Boolean.valueOf(getCopyStr).booleanValue();
        }
        Map parms = request.getParameterMap();
        if (parms.containsKey(bibIdParmName)) {
            keyName = bibIdParmName;
        } else if (parms.containsKey(copyIdParmName)) {
            keyName = copyIdParmName;
        } else if (parms.containsKey(itemIdParmName)) {
            keyName = itemIdParmName;
        }
        
        // TODO: handle runtime error where value is not an integer.
        keyValue = Integer.parseInt(request.getParameter(keyName));
        
        // Decide what to fetch from Horizon
        if (keyName == itemIdParmName) {
            getDefault = false;
            getCopy = false;
            getItem = true;
        } else {
            if (getCopy) {
                getDefault = false;
                getCopy = true;
            }
            if (getItem) {
                getDefault = false;
                getItem = true;
            }
        }
        
        response.setContentType("text/xml;charset=UTF-8");
        PrintWriter out = response.getWriter();
        out.print("<?xml version='1.0' encoding='UTF-8'?>");
        out.print("<results>");
        
        // java.lang.System.getProperties().list(System.err);
        
        try {
            conn = ds.getConnection();
            if (getDefault) {
                int n = getCopies(conn, out, keyName, keyValue);
                if (n == 0) {
                    getItems(conn, out, keyName, keyValue);
                }
            } else {
                if (getCopy) {
                    getCopies(conn, out, keyName, keyValue);
                }
                if (getItem) {
                    getItems(conn, out, keyName, keyValue);
                }
            }
        } catch( SQLException sqe){
            System.err.println("SQL Exception !" );
            sqe.printStackTrace();
        } catch( Exception e ) {
            e.printStackTrace();
        } finally {
            out.println("</results>");
            
            try {
                conn.close();
            } catch(Exception e) {
                e.printStackTrace();
            }
        }
        
        /* TODO output your page here
        out.println("<html>");
        out.println("<head>");
        out.println("<title>Servlet items</title>");
        out.println("</head>");
        out.println("<body>");
        out.println("<h1>Servlet items at " + request.getContextPath () + "</h1>");
        out.println("</body>");
        out.println("</html>");
         */
        out.close();
    }
    
    // <editor-fold defaultstate="collapsed" desc="HttpServlet methods. Click on the + sign on the left to edit the code.">
    /** Handles the HTTP <code>GET</code> method.
     * @param request servlet request
     * @param response servlet response
     */
    protected void doGet(HttpServletRequest request, HttpServletResponse response)
    throws ServletException, IOException {
        processRequest(request, response);
    }
    
    /** Handles the HTTP <code>POST</code> method.
     * @param request servlet request
     * @param response servlet response
     */
    protected void doPost(HttpServletRequest request, HttpServletResponse response)
    throws ServletException, IOException {
        processRequest(request, response);
    }
    
    /** Returns a short description of the servlet.
     */
    public String getServletInfo() {
        return "Short description";
    }
    // </editor-fold>
    
    private int getCopies(Connection conn, PrintWriter out, String keyName, int keyValue) throws SQLException {
        ResultSet rs = fetchCopies(conn, out, keyName, keyValue);
        int returnVal = printCopiesUchicago(conn, out, rs);
        
        rs.getStatement().close(); 
        
        return returnVal;
    }
        
    
    private int printCopiesUchicago(Connection conn, PrintWriter out, ResultSet rs)
    throws SQLException {

        
      String holdingStmt = "select copy#, hs.run_code, rc.descr run_descr, rc.ord run_ord, hs.ord, "
          + "display_text_from, display_text_to, "
          + "enum_chron_text = hs.display_text_from + ' ' + hs.display_text_to, hs.note "
          + "from holding_summary hs, run_code rc "
          + "where hs.run_code = rc.run_code "
          + "and copy# = ? "
          + "order by rc.ord, hs.ord ";
              
        PreparedStatement holdingPstmt = conn.prepareStatement(holdingStmt);
        
        int rows = 0;
        while (rs.next()) {
            if (rows == 0) {
                out.println("<copies>");
            }
            int copyId = rs.getInt("copy#");
            int bibId = rs.getInt("bib#");
            String mediaType = rs.getString("media_type");
            String mediaTypeDescr = rs.getString("media_descr");
            boolean summaryOfHoldings = rs.getBoolean("summary_of_holdings");
            String itemType = rs.getString("itype");
            String itemTypeDescr = rs.getString("idescr");
            String location = rs.getString("location");
            String locationName = rs.getString("location_name");
            String collection = rs.getString("collection");
            String collectionDescr = rs.getString("collection_descr");
            String callNumber = rs.getString("call_number");
            String callType = rs.getString("call_type");
            String copyNumber = rs.getString("copy_number");
            String note = rs.getString("pac_note");
            
            CallNumber call = new CallNumber(callNumber, callType, copyNumber);
            
            out.print("<copy>");
            writeElt(out, "copyId", copyId);
            writeElt(out, "bibId", bibId);
            out.print("<mediaType>");
            writeElt(out, "code", mediaType);
            if (mediaTypeDescr != null) {
                writeElt(out, "descr", mediaTypeDescr);
            }
            out.print("</mediaType>");
            out.print("<location>");
            writeElt(out, "code", location);
            if (locationName != null) {
                writeElt(out, "descr", locationName);
            }
            out.print("</location>");
            out.print("<collection>");
            writeElt(out, "code", collection);
            if (collectionDescr != null) {
                writeElt(out, "descr", collectionDescr);
            }
            out.print("</collection>");
            call.write(out);
            out.print("<type>");
            writeElt(out, "code", itemType);
            writeElt(out, "descr", itemTypeDescr);
            out.print("</type>");
            if (note != null) {
                writeElt(out, "note", note);
            }
            if (summaryOfHoldings) {
                holdingPstmt.setInt(1, copyId);
                ResultSet holdRs = holdingPstmt.executeQuery();
       
                out.print("<holdings>");
                
                String runCode = null;
                String prevRunCode = null;
                String runDescr = null;
                String displayText, displayTextFrom, displayTextTo, hNote;                
                boolean inRun = false;
                boolean newRun = true;
                
                while (holdRs.next()) {
                    prevRunCode = runCode;
                    runCode = holdRs.getString("run_code");
                    runDescr = holdRs.getString("run_descr");
                    displayTextFrom = holdRs.getString("display_text_from");
                    displayTextTo = holdRs.getString("display_text_to");
                    hNote = holdRs.getString("note");
                    if (!runCode.equals(prevRunCode)) {
                        newRun = true;
                    } else {
                        newRun = false;
                    }
                    if (newRun) {
                        if (inRun) {
                            out.print("</run>");
                        }
                        out.print("<run>");
                        writeElt(out, "code", runCode);
                        writeElt(out, "descr", runDescr);
                        inRun = true;
                    }
                    if (displayTextTo == null) {
                        writeElt(out, "enumAndCron", displayTextFrom);
                    } else{
                        writeElt(out, "enumAndCron", displayTextFrom + " " + displayTextTo);
                    }
                    if (hNote != null) {
                        writeElt(out, "note", hNote);
                    }
                }
                if (inRun) {
                    out.print("</run>");
                }
                out.print("</holdings>");
            }
            
            // Include subsidiary items
            getItems(conn, out, copyIdParmName, copyId);

            
            out.print("</copy>");
            rows++;
        }
        if (rows > 0) {
            out.println("</copies>");
        }        
        holdingPstmt.close();
        return rows;
    }
    
    // Close the statement when you're done with it by taking the ResultSet
    // return value rs and calling rs.getStatement().close();
    private ResultSet fetchCopies(Connection conn, PrintWriter out, String keyName, int keyValue) throws SQLException  {
        String copyStmt = "select c.copy#, c.bib#, c.media_type, mt.descr media_descr, c.summary_of_holdings, c.itype, it.descr idescr, "
                + "c.location, loc.name location_name, c.collection, col.pac_descr collection_descr, "
                + "c.call call_number, c.call_type, c.copy_number, c.pac_note "
                + "from copy c, location loc, collection col, media_type mt, itype it "
                + "where c.location *= loc.location "
                + "and c.collection *= col.collection "
                + "and c.media_type *= mt.media_type "
                + "and c.itype *= it.itype "
                + "and staff_only != 1 "
                + "and " + getKeyCol(keyName) + " = ?";
        

        PreparedStatement pstmt = conn.prepareStatement(copyStmt);
        pstmt.setInt(1, keyValue);
        ResultSet rs = pstmt.executeQuery();
                
        return rs;
    }

    
    private int getItems(Connection conn, PrintWriter out, String keyName, int keyValue)
    throws SQLException {
        PreparedStatement pstmt = null;
        
        // out.println("<debug>Entered getItems</debug>");
        
        int rows = 0;
        StringBuffer buf;
        int bufSize = 1024;
        int itemId;
        int copyId;
        int bibId;
        String location, locationName;
        String collection, collectionDescr;
        String callNumber, callType, copyNumber;
        String itemStatus, itemStatusDescr;
        java.util.Date dueDate = null;   
        int due_time;
        int due_date;
        String staffOnly, deleteFlag;
        String itemType, itemTypeDescr;
        String lastStatusUpdateDate, lastUpdateDate;
        
        // TODO: Handle case where want items by copy#
        // jrochkind TODO: "due" column??
        pstmt = conn.prepareStatement("SELECT " + 
          " item#, copy#, bib#, i.location, l.name as location_name," +
          "  i.collection, c.descr as collection_descr, " +
          "  i.call_reconstructed, i.call_type, i.copy_reconstructed, "+
          "i.item_status, ist.descr as item_status_descr, i.due_date, " +
          "i.due_time, staff_only, delete_flag, i.itype," +
          "  it.descr AS item_type_descr, last_status_update_date, last_update_date, " +          
          " due_date, due_time " +
        "FROM dbo.item i, dbo.location l, dbo.collection c, dbo.item_status ist, dbo.itype it " +
        "WHERE " +
        "      i.location = l.location " +
        "  AND i.collection = c.collection " +
        "  AND i.item_status = ist.item_status " +
        "  AND i.itype = it.itype " +
        "  AND i." + getKeyCol(keyName) + " = ?" + " " +
        "  AND i.staff_only=0");
        pstmt.setInt(1, keyValue);
        ResultSet rs = pstmt.executeQuery();
        
        out.println("<items>");
        while (rs.next()) {
            itemId = rs.getInt("item#");
            copyId = rs.getInt("copy#");
            bibId = rs.getInt("bib#");
            location = rs.getString("location");
            locationName = rs.getString("location_name");
            collection = rs.getString("collection");
            collectionDescr = rs.getString("collection_descr");
            callNumber = rs.getString("call_reconstructed");
            callType = rs.getString("call_type");
            copyNumber = rs.getString("copy_reconstructed");
            itemStatus = rs.getString("item_status");
            itemStatusDescr = rs.getString("item_status_descr");
                        
            
            due_date = rs.getInt("due_date");
            due_time = rs.getInt("due_time");
            if ( due_date != 0 ) {
              dueDate = parseDueDate( rs.getInt("due_date"),rs.getInt("due_time")); 
            }
            
            
            itemType = rs.getString("itype");
            itemTypeDescr = rs.getString("item_type_descr");

            CallNumber call = new CallNumber(callNumber, callType, copyNumber);
            
            out.print("<item>");
            writeElt(out, "itemId", itemId);
            if (copyId != 0) {
                writeElt(out, "copyId", copyId);
            }
            writeElt(out, "bibId", bibId);
            if (location != null || locationName != null) {
                out.print("<location>");
                writeElt(out, "code", location);
                writeElt(out, "descr", locationName);
                out.print("</location>");
            }
            out.print("<collection>");
            writeElt(out, "code", collection);
            writeElt(out, "descr", collectionDescr);
            out.print("</collection>");
            call.write(out);
            out.print("<status>");
            writeElt(out, "code", itemStatus);
            writeElt(out, "descr", itemStatusDescr);
            out.print("</status>");

            if (dueDate != null) {
                DateFormat df = new SimpleDateFormat("yyyy-MM-dd");
                DateFormat tf = new SimpleDateFormat("HH:mm:ss");
              
                out.print("<dueDate>");
               // w3cdtf format, with or without time specified.
                writeElt(out, "dueDate", formatW3cDtf(dueDate, (due_time != 0)));
                writeElt(out, "dateOnly", df.format(dueDate));
                if ( due_time != 0 ) {
                  writeElt(out, "timeOnly", tf.format(dueDate));
                }
                out.print("</dueDate>");
            }
           
            out.print("<type>");
            writeElt(out, "code", itemType);
            writeElt(out, "descr", itemTypeDescr);
            out.print("</type>");
            out.print("</item>");
            
            rows++;
        }
        out.println("</items>");
        // out.println("<debug>Exiting getItems</debug>");
        pstmt.close();
        return rows;
    }
    
    // begin misc. utilities
    public static Context getInitialContext()
    throws NamingException{
        Properties p = new Properties();
        p.put( Context.INITIAL_CONTEXT_FACTORY, "org.jnp.interfaces.NamingContextFactory" );
        p.put( Context.PROVIDER_URL, "localhost:1099" ); //TODO: make not hardcoded
        return new InitialContext( p );
    }
    
    private static String getKeyCol(String keyName) {
        String ret = null;
        if (keyName == bibIdParmName) {
            ret = "bib#";
        } else if (keyName == itemIdParmName) {
            ret = "item#";
        } else if (keyName == copyIdParmName) {
            ret = "copy#";
        }
        return ret;
    }
    
    private static void writeElt(PrintWriter out, String name, String str) {
        if (str != null) {
            str = HtmlEncoder.encode(str);
            out.print('<');
            out.print(name);
            out.print('>');
            out.print(str);
            out.print('<');
            out.print('/');
            out.print(name);
            out.print('>');
        }
    }
    
    private static void writeElt(PrintWriter out, String name, int i) {
        out.print('<');
        out.print(name);
        out.print('>');
        out.print(i);
        out.print("</");
        out.print(name);
        out.print('>');
    }
    
    private static void writeElt(PrintWriter out, String name, String str, String attrName, String attrVal) {
        if (str == null) {
            str = "";
        } else {
            str = HtmlEncoder.encode(str);
        }
        if (attrVal == null) {
            attrVal = "";
        }
        out.print('<');
        out.print(name);
        out.print(' ');
        out.print(attrName);
        out.print("='");
        out.print(attrVal);
        out.print("'>");
        out.print(str);
        out.print("</");
        out.print(name);
        out.print('>');
    }
    
    // Take Horizon's "days since 1/1/1970" and "minutes since midnight" and
    // combine into an ordinary java.util.Date object. 
    public static java.util.Date parseDueDate(int due_date, int due_time) {
      GregorianCalendar calendar = new GregorianCalendar(1970, Calendar.JANUARY, 1);
      calendar.add(Calendar.DAY_OF_MONTH , due_date);
      calendar.add(Calendar.MINUTE, due_time);
      
      return calendar.getTime();
    }
    
    // ouputs a java.util.Date as a w3cdtf, with or without time included.
    // Should do this as a DateFormat sub-class, but we're lazy and ignorant.
    public static String formatW3cDtf(java.util.Date date, boolean shouldOutputTime) {
      if (shouldOutputTime) {
        DateFormat df = new SimpleDateFormat("yyyy-MM-dd'T'HH:mm:ssZ");
        String formatted = df.format(date);
        // TODO
        //but need to add in a colon that w3cdtf requires but java don't, argh. 
        return formatted.substring(0, formatted.length()-2) + ":" + formatted.substring(formatted.length()-2);
      }
      else {
         DateFormat df = new SimpleDateFormat("yyyy-MM-dd");
         return df.format(date);
      }
    }
    
    //
    // Support classes
    //
    
    private static class CallNumber {
        String prefix = null;
        String callNumber = null;
        String callType = null;
        String copyNumber = null;
        
        static char NSB = '\u0018';
        static char NSE = '\u0019';
        
        public CallNumber (String call, String type, String copy) {
            if (call == null) {
                return;
            } else {
                int p1 = call.indexOf(NSB);
                if (p1 >= 0) {
                    int p2 = call.indexOf(NSE);
                    prefix = call.substring(p1+1,p2);
                    // TODO: trim by hand to cut down garbage collection
                    callNumber = call.substring(p2+1).trim();
                } else {
                    callNumber = call;
                }
            }
            callType = type;
            copyNumber = copy;
        }
        
        public void write(PrintWriter out) {
            if (callNumber == null && copyNumber == null) {
                return;
            }
            out.print("<call>");
            try {
                writeElt(out, "prefix", prefix);
                writeElt(out, "callNumber", callNumber, "type", callType);
                if (copyNumber != null) {
                    writeElt(out, "copyNumber", copyNumber);
                }
            } finally {
                out.print("</call>");
            }
            
        }
    }
    
    
    
}

